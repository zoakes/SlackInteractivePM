{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green128\blue0;\red100\green100\blue100;\red0\green0\blue255;
\red204\green0\blue102;\red0\green0\blue139;\red164\green71\blue199;\red0\green128\blue128;\red128\green0\blue128;
\red139\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c50196\c0;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c0\c0\c100000;
\csgenericrgb\c80000\c0\c40000;\csgenericrgb\c0\c0\c54510;\csgenericrgb\c64314\c27843\c78039;\csgenericrgb\c0\c50196\c50196;\csgenericrgb\c50196\c0\c50196;
\csgenericrgb\c54510\c0\c0;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx840\tx1680\tx2520\tx3360\tx4200\tx5040\tx5880\tx6720\tx7560\tx8400\tx9240\tx10080\tx10920\tx11760\tx12600\tx13440\tx14280\tx15120\tx15960\tx16800\tx17640\tx18480\tx19320\tx20160\tx21000\tx21840\tx22680\tx23520\tx24360\tx25200\tx26040\tx26880\pardeftab720\partightenfactor0

\f0\fs20 \cf2 //Author -- ZOakes\
\cf3 \
\cf2 \{Master program, only need to run in one chart -- commands all globals for each symbol...\}\
//IN OTHER STRATEGY OR INDICATOR --- READ the global s!!\
\cf3 \
\
\cf2 // ---------- READ IN THE RECENT COMMANDS --------- //\
\cf4 inputs\cf0 :\
\cf5 use_globals\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf5 loop_on\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 );\
\cf3 \
\
\cf4 vars\cf0 :\
\cf7 list_ID\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\cf3  \cf2 //list of lists id..?\
\cf7 list_cmd\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 list_sym\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 list_cid\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 list_tm\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 cid\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 cmd\cf0 (\cf8 ""\cf0 ),\
\cf7 sym\cf0 (\cf8 ""\cf0 ),\
\cf7 tm\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 );\
\cf3 \
\
\cf2 // ----------  Read in the Matrix.... ---------- //\
\cf3 \
\cf2 // MAYBE a good idea to do ...\
\cf3 \
\
		\cf2 \{if LastBarOnChart and barstatus(1)=2 then\
\
		begin\
		\}\
\cf3 \
\
\
\cf2 // to RUN ONCE --- if currentbar = 1 then begin\
\cf7 list_id\cf3  \cf0 =\cf3  \cf9 listc.New\cf0 ;\
\cf3 \
\cf2 //path = "C:\\Users\\Zach Oakes\\Documents\\eld_read.txt"\
\cf3 \
\cf10 value1\cf3  \cf0 =\cf3  \cf9 listc.ReadFile\cf0 (\cf7 list_id\cf0 ,\cf3  \cf8 "C:\\Users\\Zach Oakes\\Documents\\eld_read.txt"\cf0 );\
\cf3 \
\cf2 //Columns -- List of Lists ? (of cids, cmds, syms, and tms)\
\cf3 \
\cf7 list_cid\cf3  \cf0 =\cf3  \cf9 ListC.Get\cf0 (\cf7 list_id\cf0 ,
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf7 list_cmd\cf3  \cf0 =\cf3  \cf9 ListC.Get\cf0 (\cf7 list_id\cf0 ,
\f1\b \cf6 2
\f0\b0 \cf0 );\
\cf7 list_sym\cf3  \cf0 =\cf3  \cf9 ListC.Get\cf0 (\cf7 list_id\cf0 ,
\f1\b \cf6 3
\f0\b0 \cf0 );\
\cf7 list_tm\cf3  \cf0 =\cf3  \cf9 ListC.Get\cf0 (\cf7 list_id\cf0 ,
\f1\b \cf6 4
\f0\b0 \cf0 );\
\cf3 \
\
\cf2 \{\
value (1 Row) -- Get( Column_List, idx/ROW )\
Really these are VALUES of lists of strings / etc -- Each Row\
 cid = ListS.Get(list_cid, 1); // 1st row, of CID list (column)\
 value = ListS.Get(Column, Row);\
\}\
\cf3 \
\cf2 // ------ 1ST ROW ------ //\
//Lets get the first row...\
\cf7 cid\cf3  \cf0 =\cf3  \cf9 ListN.get\cf0 (\cf7 list_cid\cf0 ,\cf3  
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf7 cmd\cf3  \cf0 =\cf3  \cf9 ListS.Get\cf0 (\cf7 list_cmd\cf0 ,\cf3  
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf7 sym\cf3  \cf0 =\cf3  \cf9 ListS.Get\cf0 (\cf7 list_sym\cf0 ,
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf7 tm\cf3  \cf0 =\cf3  \cf9 ListN.Get\cf0 (\cf7 list_tm\cf0 ,\cf3  
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf3 \
\cf2 //print("Row:");\
//print(cid,cmd, sym, tm);\
\cf3 \
\cf2 //Make GLOBAL dict ... WRITE GLOBALS \
\cf3 \
\cf4 vars\cf0 :\
\cf7 sym_id\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 haltAll\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 halt\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 pause\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 go_flat\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 );\
\cf3 \
\
\cf2 // Loop Through Rows of CSV (More accurately, loop through column lists one row at a time !! \
\cf4 vars\cf0 :\
\cf7 last_CID\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 ),\
\cf7 recordNum\cf0 (
\f1\b \cf6 0
\f0\b0 \cf0 );\
\cf3 \
\cf2 // -------------------------------- POSSIBLY EASIER TO SIMPLY NUMBER THEM ALPABETICALLY?\
\cf3 \
\cf4 if\cf3  \cf9 lastbaronchart\cf3  \cf4 then\cf3  \cf4 begin\cf3   \cf2 // THIS MUST FUCKING BE HERE -- otherwise STARTS OVER at IDX == 4!!\
\cf3 \
\cf4 if\cf3  \cf5 loop_on\cf3  \cf0 >\cf3  
\f1\b \cf6 0
\f0\b0 \cf3  \cf4 then\cf3  \cf4 begin\cf3  \
\
\cf4 while\cf3  \cf7 cmd\cf3  \cf0 <>\cf3  \cf8 "EOF"\cf3  \cf4 and\cf3  \cf7 cid\cf3  \cf0 <>\cf3  \cf0 -
\f1\b \cf6 1
\f0\b0 \cf3  \cf2 //recordNum < 5 //\
\cf4 begin\cf3  \
	\cf4 print\cf0 (\cf8 "Record -- "\cf0 ,\cf3  \cf7 recordNum\cf0 );\
\cf3 \
	\cf2 //Start at IDX = 1 !!\
\cf3 	\cf7 recordNum\cf3  \cf0 =\cf3  \cf7 recordNum\cf3  \cf0 +\cf3  
\f1\b \cf6 1
\f0\b0 \cf0 ;\
\cf3 	\
	\cf2 //if recordNum = 4 then begin \
\cf3 	\cf2 //	print("Breaking");\
\cf3 	\cf2 //	break;\
\cf3 	\cf2 //end;\
\cf3 	\cf2 //End Here!\
\cf3 	\
	\
	\cf2 //Get CID to check if NEW value... (Find Beginning of new stuff)\
\cf3 	\
	\
	\cf7 cid\cf3  \cf0 =\cf3  \cf9 ListN.Get\cf0 (\cf7 list_cid\cf0 ,\cf3  \cf7 recordNum\cf0 );\
\cf3 	\cf7 cmd\cf3  \cf0 =\cf3  \cf9 ListS.Get\cf0 (\cf7 list_cmd\cf0 ,\cf3  \cf7 recordNum\cf0 );\
\cf3 	\
	\cf2 //Check is EOF (-1 CID) -- if so, End here!\
\cf3 	\cf4 if\cf3  \cf7 cid\cf3  \cf0 =\cf3  \cf0 -
\f1\b \cf6 1
\f0\b0 \cf3  \cf4 then\cf3  \cf4 begin\cf3  \
		\cf2 //print("CID",cid);\
\cf3 		\cf4 print\cf0 (\cf8 "Breaking..."\cf0 );\
\cf3 		\cf4 break\cf0 ;\
\cf3 	\cf4 end\cf0 ;\
\cf3 	\
	\cf2 //check for NEW values / Rows...\
\cf3 	\
	\cf4 if\cf3  \cf7 cid\cf3  \cf0 <=\cf3  \cf7 last_CID\cf3  \cf4 then\
\cf3 	\cf4 begin\cf3  \
		\cf2 //Skip until NEW values...\
\cf3 		\cf4 continue\cf0 ;\
\cf3 	\cf4 end\cf0 ;\
\cf3 	\
	\
	\cf2 //check for EOF ... (Find end of new stuff)\
\cf3 	\
	\cf2 //cmd = ListS.Get(list_cmd,recordNum);\
\cf3 	\cf4 if\cf3  \cf7 cmd\cf3  \cf0 =\cf3  \cf8 "EOF"\cf3  \cf4 then\cf3  \
	\cf4 begin\cf3  \
		\cf7 last_CID\cf3  \cf0 =\cf3  \cf7 cid\cf0 ;\cf3  \cf2 //To Not Repeat !!\
\cf3 		\cf4 break\cf0 ;\
\cf3 	\cf4 end\cf0 ;\
\cf3 	\
	\cf2 //cid = ListN.Get(list_CID, recordNum);\
\cf3 	\cf2 //cmd = ... \
\cf3 							\cf2 //DEFINE EACH ROW...\
\cf3 	\cf7 sym\cf3  \cf0 =\cf3  \cf9 ListS.Get\cf0 (\cf7 list_sym\cf0 ,\cf3  \cf7 recordNum\cf0 );\
\cf3 	\cf7 tm\cf3  \cf0 =\cf3  \cf9 ListN.Get\cf0 (\cf7 list_tm\cf0 ,\cf3  \cf7 recordNum\cf0 );\
\cf3 	\cf4 print\cf0 (\cf7 recordNum\cf0 ,\cf3  \cf8 "--"\cf0 ,\cf7 cid\cf0 ,\cf3  \cf7 cmd\cf0 ,\cf3  \cf7 sym\cf0 ,\cf3  \cf7 tm\cf0 );\
\cf3 	\
										\cf2 //Might need to set these as defaults here!! Otherwise will throw errors checking for ALL in strategies.\
\cf3 	\
	\cf2 //SET GLOBALS DEPENDING ON WHICH COMMAND TO BE EXECUTED / FLAGGED FOR EXECUTION \
\cf3 	\cf4 switch\cf0 (\cf7 cmd\cf0 )\cf3  \
	\cf4 begin\cf3  \
		\cf2 //Flatten\
\cf3 		\cf4 case\cf3  \cf8 "F"\cf0 :\
\cf3 			\cf4 if\cf3  \cf5 use_globals\cf3  \cf0 >\cf3  
\f1\b \cf6 0
\f0\b0 \cf3  \cf4 then\cf3  \cf7 go_flat\cf3  \cf0 =\cf3  \cf9 GVSetNamedBool\cf0 (\cf8 "Go_Flat_"\cf3  \cf0 +\cf3  \cf7 sym\cf0 ,\cf4 True\cf0 );\cf3  \cf2 //Throwing Error !! \
\cf3 			\cf4 print\cf0 (\cf8 "Going Flat"\cf0 );\
\cf3 		\
		\cf2 //Halt\
\cf3 		\cf4 case\cf3  \cf8 "H"\cf0 :\
\cf3 			\cf4 if\cf3  \cf5 use_globals\cf3  \cf0 >\cf3  
\f1\b \cf6 0
\f0\b0 \cf3  \cf4 then\cf3  \cf7 halt\cf3  \cf0 =\cf3  \cf9 GVSetNamedBool\cf0 (\cf8 "Halt_"\cf3  \cf0 +\cf3  \cf7 sym\cf0 ,\cf3  \cf4 True\cf0 );\
\cf3 			\cf4 print\cf0 (\cf8 "Halting..."\cf0 );\
\cf3 			\cf4 if\cf3  \cf7 sym\cf3  \cf0 =\cf3  \cf8 "ALL"\cf3  \cf4 then\cf3  \
			\cf4 begin\cf3  \
				\cf4 if\cf3  \cf5 use_globals\cf3  \cf0 >\cf3  
\f1\b \cf6 0
\f0\b0 \cf3  \cf4 then\cf3  \cf7 haltAll\cf3  \cf0 =\cf3  \cf9 GVSetNamedBool\cf0 (\cf8 "HaltAll"\cf0 ,\cf3  \cf4 True\cf0 );\
\cf3 			\cf4 end\cf0 ;\
\cf3 			\
		\cf2 //Pause -- Set Global to Time (in hours) to Pause (tm) \
\cf3 		\cf4 case\cf3  \cf8 "P"\cf0 :\
\cf3 			\cf4 if\cf3  \cf5 use_globals\cf3  \cf0 >\cf3  
\f1\b \cf6 0
\f0\b0 \cf3  \cf4 then\cf3  \cf7 pause\cf3  \cf0 =\cf3  \cf9 GVSetNamedDouble\cf0 (\cf8 "Pause_"\cf3  \cf0 +\cf3  \cf7 sym\cf0 ,\cf3  \cf7 tm\cf0 );\
\cf3 			\cf4 print\cf0 (\cf8 "Pausing..."\cf0 );\
\cf3 			\
			\
		\cf4 default\cf0 :\
\cf3 			\cf4 print\cf0 (\cf8 "Error -- Please Check CSV / TXT -- only 3 options!"\cf0 );\
\cf3 	\
	\cf4 end\cf0 ;\
\cf3 	\
	\
\
\cf4 end\cf0 ;\
\cf3 \
\
\cf4 end\cf0 ;\
\cf3 \
\cf4 end\cf0 ;\
\cf3 \
\cf4 vars\cf0 :\
\cf7 getHA\cf0 (\cf4 false\cf0 );\
\cf3 \
\cf7 haltAll\cf3  \cf0 =\cf3  \cf9 GVSetBoolean\cf0 (
\f1\b \cf6 1
\f0\b0 \cf0 ,\cf4 True\cf0 );\
\cf3 \
\cf7 getHA\cf3  \cf0 =\cf3  \cf9 GVGetBoolean\cf0 (
\f1\b \cf6 1
\f0\b0 \cf0 );\
\cf4 print\cf0 (\cf8 "Get"\cf0 ,\cf7 getHA\cf0 );\
\cf2 \{\
\
// ---------- Logic to READ GLOBALS\
\
var:\
global_dict(mapSN.new),\
global_values(listn.new);\
\
listn.pushback(global_values,halt);\
listn.pushback(global_values,pause);\
listn.pushback(global_values,go_flat);\
\
mapsn.put(sym_id,symbolname,global_values);\
\
\
//Logic to READ the globals (in STrategy)...\
vars:\
sys_go_flat(false),\
sys_halt(0),\
start_time(0),\
pause_time(0);\
\
pause_time = GVGetNamedDouble("Pause_"+symbolname,0); //In hundreds...\
sys_halt = GVGetNamedDouble("HALT",0);\
sys_go_flat = GVGetNamedbool("Go_Flat_"+symbolname);\
\
//May need to parse symbol name with leftstr(symbolname,2); etc\'85\
if pause_time <> 0 then start_time = time + pause_time; ///Make sure only read / set once...\
\
if time > start_time then begin \
if sys_halt = 0 then begin \
//Trading logic... \
\
end;\
end;\
\
if sys_go_flat then begin \
//sell("Auto LX") this bar at close;\
//buytocover("Auto SX") this bar at close;\
end;\
\
\}\
\
}